
project hardware/libhardware_legacy/
diff --git a/hardware/libhardware_legacy/wifi/Android.mk b/hardware/libhardware_legacy/wifi/Android.mk
index c7bdc59..426eae1 100644
--- a/hardware/libhardware_legacy/wifi/Android.mk
+++ b/hardware/libhardware_legacy/wifi/Android.mk
@@ -46,4 +46,11 @@ ifeq ($(BOARD_HAVE_SAMSUNG_WIFI),true)
 LOCAL_CFLAGS += -DSAMSUNG_WIFI
 endif
 
+ifeq ($(WIFI_MAC_ADDR_CSPSA),true)
+$(shell mkdir -p $(TARGET_OUT_INTERMEDIATES)/SHARED_LIBRARIES/libcspsa_intermediates)
+$(shell touch $(TARGET_OUT_INTERMEDIATES)/SHARED_LIBRARIES/libcspsa_intermediates/export_includes)
+LOCAL_CFLAGS += -DCSPSA
+LOCAL_SHARED_LIBRARIES += libcspsa
+endif
+
 LOCAL_SHARED_LIBRARIES += libnetutils
diff --git a/hardware/libhardware_legacy/wifi/wifi.c b/hardware/libhardware_legacy/wifi/wifi.c
index e571a79..85aac0a 100644
--- a/hardware/libhardware_legacy/wifi/wifi.c
+++ b/hardware/libhardware_legacy/wifi/wifi.c
@@ -48,6 +48,10 @@
 #include <sys/_system_properties.h>
 #endif
 
+#ifdef CSPSA
+#include "cspsa.h"
+#endif
+
 static struct wpa_ctrl *ctrl_conn;
 static struct wpa_ctrl *monitor_conn;
 
@@ -97,6 +101,13 @@ struct genl_family *nl80211;
 #define WIFI_DRIVER_FW_PATH_P2P		NULL
 #endif
 
+#ifdef CSPSA
+#define D_CSPSA_DEFAULT_NAME            "CSPSA0"
+#define CSPSA_WLAN_MAC_ADDR_KEY         0x00010000
+#define WLAN_MAC_ADDR_SIZE              6
+#define MAC_FMT                         "0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,0x%02x"
+#endif
+
 #ifdef WIFI_EXT_MODULE_NAME
 static const char EXT_MODULE_NAME[] = WIFI_EXT_MODULE_NAME;
 #ifdef WIFI_EXT_MODULE_ARG
@@ -133,10 +144,96 @@ static const char P2P_CONFIG_FILE[]     = "/data/misc/wifi/p2p_supplicant.conf";
 static const char CONTROL_IFACE_PATH[]  = "/data/misc/wifi/sockets";
 static const char MODULE_FILE[]         = "/proc/modules";
 
+#ifdef CSPSA
+static const char WLAN_MAC_ADDRESS_PARAM_NAME[]                = "macaddr";
+static const char WLAN_INVALID_MAC_ADDRESS[]                   = {0x00};
+#endif
+
 static const char IFNAME[]              = "IFNAME=";
 #define IFNAMELEN			(sizeof(IFNAME) - 1)
 static const char WPA_EVENT_IGNORE[]    = "CTRL-EVENT-IGNORE ";
 
+#ifdef CSPSA
+static int wifi_fetch_mac(char* wifi_driver_param)
+{
+    int found = 0;
+    int ret = -1;
+
+    CSPSA_Result_t result;
+    CSPSA_Handle_t handle;
+    CSPSA_Size_t size;
+    CSPSA_Key_t key = CSPSA_WLAN_MAC_ADDR_KEY;
+    CSPSA_Data_t *cspsa_data = NULL;
+
+    result = CSPSA_Open(D_CSPSA_DEFAULT_NAME, &handle);
+    if (result != T_CSPSA_RESULT_OK) {
+        ALOGE("Can't open CSPSA area (result 0x%X) ", result);
+        goto cspsa_finished;
+    }
+
+    result = CSPSA_GetSizeOfValue(handle, key, &size);
+    if (result != T_CSPSA_RESULT_OK) {
+        ALOGE("Can't get size of key (h %p key 0x%x result 0x%X).",
+          handle, key, result);
+        goto cspsa_finished;
+    }
+
+    if (size != WLAN_MAC_ADDR_SIZE) {
+        ALOGE("Read wrong amount of bytes: %d", size);
+        goto cspsa_finished;
+    }
+
+    cspsa_data = (CSPSA_Data_t *) malloc(size);
+    if (!cspsa_data) {
+        ALOGE("Can't malloc %d bytes.", size);
+        goto cspsa_finished;
+    }
+
+    result = CSPSA_ReadValue(handle, key, size, cspsa_data);
+    if (result != T_CSPSA_RESULT_OK) {
+        ALOGE("Can't read from CSPSA (h %p  key 0x%x size %d res 0x%X).",
+            handle, key, size, result);
+        goto cspsa_finished;
+    }
+
+    /* Don't use CSPSA MAC address if it ends with :00:00:00.*/
+    if ((0 == cspsa_data[3]) && (0 == cspsa_data[4]) && (0 == cspsa_data[5])) {
+        ALOGI("Default MAC address read from CSPSA. Using random.");
+        goto cspsa_finished;
+    }
+
+    found = 1;
+    ret = 0; //success
+    memcpy(wifi_driver_param, cspsa_data, WLAN_MAC_ADDR_SIZE);
+    ALOGI("MAC address from CSPSA [0x%02x:0x%02x:0x%02x:0x%02x:0x%02x:0x%02x]",
+         cspsa_data[0], cspsa_data[1], cspsa_data[2],
+         cspsa_data[3], cspsa_data[4], cspsa_data[5]);
+
+cspsa_finished:
+    if (cspsa_data)
+        free(cspsa_data);
+    result = CSPSA_Close(&handle);
+    if (result != T_CSPSA_RESULT_OK)
+        ALOGE("Can't close CSPSA area (result %x) ", result);
+    if (found == 0) {
+      memcpy(wifi_driver_param, WLAN_INVALID_MAC_ADDRESS,
+              sizeof(WLAN_INVALID_MAC_ADDRESS));
+    }
+    return ret;
+}
+
+static void wifi_format_mac_param(char* mac)
+{
+    char mac_address[100];
+    sprintf(mac_address, MAC_FMT,
+        mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
+    mac[0] = ' '; //one space to separate insmod parameters
+    strcpy(&mac[1], WLAN_MAC_ADDRESS_PARAM_NAME);
+    strcat(mac, "=");
+    strcat(mac, mac_address);
+}
+#endif
+
 static const char SUPP_ENTROPY_FILE[]   = WIFI_ENTROPY_FILE;
 static unsigned char dummy_key[21] = { 0x02, 0x11, 0xbe, 0x33, 0x43, 0x35,
                                        0x68, 0x47, 0x84, 0x99, 0xa9, 0x2b,
@@ -187,7 +284,22 @@ static int insmod(const char *filename, const char *args)
     if (!module)
         return -1;
 
+#ifndef CSPSA
     ret = init_module(module, size, args);
+#else
+    char driver_module_arg[255];
+    char mac_address_param[255];
+    strcpy(driver_module_arg, args);
+ 
+    if (0 == wifi_fetch_mac(mac_address_param)) {
+        wifi_format_mac_param(mac_address_param);
+    }
+    strcat(driver_module_arg, mac_address_param);
+    ALOGI("cw1200_wlan.ko (%s)", driver_module_arg);
+
+    ret = init_module(module, size, driver_module_arg);
+#endif
+
 
     free(module);
 
